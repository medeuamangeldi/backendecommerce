// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  phoneNumber String    @unique
  password    String
  secretCode  String
  role        Role      @default(USER)
  lang        Lang      @default(RU)
  profile     Profile?
  currentCart Cart?
  orders      Order[]
  favorites   Favorite[]
  prizes      Prize[]
  lotteryTickets LotteryTicket[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Lang {
  EN
  RU
  KZ
}

enum Status {
  PROCESSING // формируется
  WAY        // в пути
  PICKUP     // ожидает в пункте выдачи
  DELIVERED  // получен
  CANCELED   // отменен
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatarUrl String?
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id              Int        @id @default(autoincrement())
  userId          Int        @unique
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems       CartItem[]
  deliveryInfo    DeliveryInfo?
  totalPrice      Float?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Order {
  id              Int      @id @default(autoincrement())
  cartItems       CartItem[]
  deliveryInfo    DeliveryInfo?
  status          Status   @default(PROCESSING)
  totalPrice      Float
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id              Int      @id @default(autoincrement())
  cartId          Int?
  cart            Cart?     @relation(fields: [cartId], references: [id], onDelete: SetNull)
  orderId         Int?
  order           Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  modelId         Int
  model           Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  quantity        Int
  totalPrice      Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  photoUrls   String[]
  currency    Currency @default(KZT)
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  models      Model[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Currency {
  KZT
  USD
  RUB
}

model Model {
  id        Int      @id @default(autoincrement())
  name      String
  photoUrls String[]
  price     Float
  deal      Boolean  @default(false)
  cartItems CartItem[]
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  favorites Favorite[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  products    Product[]
  photoUrl    String
  iconUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId  Int
  model    Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryInfo {
  id              Int      @id @default(autoincrement())
  cartId          Int?     @unique
  cart            Cart?    @relation(fields: [cartId], references: [id], onDelete: SetNull)
  orderId         Int?     @unique
  order           Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  fullName        String
  phoneNumber     String
  selfPick        Boolean  @default(false)
  postalCode      String?
  cityId          Int
  city            City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  deliveryAddress String?
  comment         String?
  pickupUrl       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model LotteryTicket   {
  id          Int      @id @default(autoincrement())
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  combination String   @unique
  isWin       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model LotoDay {
  id          Int      @id @default(autoincrement())
  lotoDate    DateTime @unique
  prizes      Prize[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Prize {
  id          Int      @id @default(autoincrement())
  prizeName   String
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotoDayId   Int
  lotoDay     LotoDay  @relation(fields: [lotoDayId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model City {
  id            Int      @id @default(autoincrement())
  name          String
  pickupUrls    String[]
  DeliveryInfo  DeliveryInfo[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GlobalConfig {
  id            Int       @id @default(autoincrement())
  isDealActive  Boolean   @default(false)
  isBuyActive   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}